version: 2.1
orbs:
  slack: circleci/slack@3.2.0
  win: circleci/windows@2.4.1

commands:
  setup:
    description: 'Setup Machine'
    steps:
      - restore_cache:
          keys:
            - npm-cache
      - run:
          name: 'Set environment variables'
          command: |
            touch $BASH_ENV
            if [[ "${CIRCLE_BRANCH}" == "develop" ]]; then echo 'export DEVELOP=true' >> $BASH_ENV; fi
            if [[ "${CIRCLE_BRANCH}" =~ ^release- ]]; then echo 'export RELEASE=true' >> $BASH_ENV; fi
            source $BASH_ENV
      - run:
          name: 'Install Dependencies'
          command: |

            # Add Chrome to apt sources
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'

            # Install system dependencies
            sudo apt-get update
            sudo apt-get install python-dev python-pip google-chrome-stable time
            sudo pip install -U pip setuptools
            sudo pip install awscli==1.18.85 datadog==0.40.1
            sudo npm install -g npm@6.14.4

            # Install node dependencies
            node ./scripts/gtime.js monorepo_install npm ci

            # Build the PWA
            npm run lerna -- run analyze-build --scope "retail-react-app"

            # Report bundle sizes
            node ./scripts/report-bundle-size.js

            # Add credentials file at ~/.mobify so we can upload to Mobify Cloud
            npm run save-credentials --prefix packages/template-retail-react-app -- --user "${MOBIFY_CLIENT_USER}" --key "${MOBIFY_CLIENT_API_KEY}"

            # Check that packages are all using the same versions of compilers, etc.
            node ./scripts/check-dependencies.js

            # Install Snyk CLI
            sudo npm install -g snyk

            # Install Lighthouse CI CLI
            sudo npm install -g @lhci/cli
      - save_cache:
          key: npm-cache
          paths:
            - /root/.npm
  setup_windows:
    description: 'Setup Machine'
    steps:
      - restore_cache:
          keys:
            - npm-cache
      - run:
          name: 'Install Dependencies'
          command: |

            # Install node dependencies
            npm ci
            
            # Symlink local dependencies
            # A bug manifests itself on Windows where lerna bootsrap fails to generate the `pwa-kit-dev` bin shims
            # in the bin file. As a result, Windows runs the `pwa-kit-dev` bin file using Windows Host Script instead
            # of Node. We run the lerna link command to fix the shims in the `pwa-kit-dev` bin file on Windows.
            npm run lerna link --force-local
      - save_cache:
          key: npm-cache
          paths:
            - /root/.npm
  setup_npm_7:
    description: 'Setup Machine with npm 7'
    steps:
      - restore_cache:
          keys:
            - npm-cache
      - run:
          name: 'Install Dependencies'
          command: |

            sudo npm install -g npm@7
            npm ci
      - save_cache:
          key: npm-cache
          paths:
            - /root/.npm
  setup_npm_8:
    description: 'Setup Machine with npm 8'
    steps:
      - restore_cache:
          keys:
            - npm-cache
      - run:
          name: 'Install Dependencies'
          command: |

            sudo npm install -g npm@8
            npm ci
      - save_cache:
          key: npm-cache
          paths:
            - /root/.npm
  runtests:
    description: 'Run tests'
    parameters:
      cwd:
        description: 'The directory to execute the tests from'
        default: ${PWD}
        type: string
    steps:
      - run:
          name: 'Run tests'
          command: |
            # Explicitly set pipefile policy. This is the default for non-windows, but seems
            # that is needs to be set on windows to fail immediately.
            set -eo pipefail

            cd << parameters.cwd >>

            # Note: Each of these test commands need to be exposed on the monorepo
            # root and *also* on the PWA package. This section is run on both.

            # Always run fast unit tests
            npm run test
  smoketestscripts:
    description: 'Smoke test scripts'
    parameters:
      dir:
        description: 'The path to a project to test'
        default: './packages/template-retail-react-app'
        type: string
    steps:
      - run:
          name: 'Smoke test scripts'
          command: |
            # Basic smoke-tests for uncommonly run scripts in a project
            node ./scripts/smoke-test-npm-scripts.js --dir << parameters.dir >>
  lighthouse-ci:
    description: 'Run Lighthouse CI on the PWA'
    steps:
      - run:
          name: Run Lighthouse CI on the PWA
          command: |
            npm run test:lighthouse --prefix packages/template-retail-react-app
  checkclean:
    description: 'Check Repository Clean'
    steps:
      - run:
          name: Check Repository Clean
          command: |
              # Print status for debugging on CircleCI.
              git status
              # Fail the build if any step leaves uncommitted changes in the repo
              # that would prevent Lerna from publishing (Lerna gets this right).
              git diff --exit-code

  generate_and_test_project:
    description: 'Generate project'
    steps:
      - run:
          name: Generate project
          environment:
            GENERATOR_PRESET: 'test-project'
          command: |
            set GENERATOR_PRESET=test-project
            NODE_DEBUG=cluster,net,http,fs,tls,module,timers node packages/pwa-kit-create-app/scripts/create-mobify-app-dev.js --outputDir generated-project

  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing else to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

jobs:
  testNode12:
    docker:
      - image: circleci/node:12-stretch-browsers
    steps:
      - checkout
      - setup
      - runtests
      - lighthouse-ci
      - smoketestscripts
      - checkclean
      - early_return_for_forked_pull_requests
      - store_test_results:
          path: packages/template-retail-react-app/tests/reports
          when: always
      - store_artifacts:
          path: packages/template-retail-react-app/tests/screenshots
          when: always
      - slack/status:
          fail_only: true
          only_for_branches: develop
  testNode14Windows:
    executor:
      name: win/default
      size: "large"
      shell: bash.exe
    steps:
      - checkout
      - setup_windows
      - runtests
  testNode14npm7:
    docker:
      - image: circleci/node:14-stretch-browsers
    steps:
      - checkout
      - setup_npm_7
      - runtests
  testNode14npm8:
    docker:
      - image: circleci/node:14-stretch-browsers
    steps:
      - checkout
      - setup_npm_8
      - runtests
  testNode14:
    docker:
      - image: circleci/node:14-stretch-browsers
    steps:
      - checkout
      - setup
      - runtests
      - lighthouse-ci
      - smoketestscripts
      - early_return_for_forked_pull_requests
      - run:
          name: Push Bundle
          command: |
              if [[ $DEVELOP || $RELEASE ]]; then
                target=staging
              elif [[ $RELEASE ]]; then
                target=production
              else
                target=""
              fi

              project="scaffold-pwa"

              if [[ $target ]]; then
                npm run push --prefix packages/template-retail-react-app -- -s $project --message "build ${CIRCLE_BUILD_NUM} on ${CIRCLE_BRANCH} (${CIRCLE_SHA1})" --target $target
              fi
      - checkclean
      - run:
          name: Publish to NPM
          command: |
              # Add NPM token to allow publishing from Circle
              echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

              if [[ $RELEASE ]]; then
                # Publish all changed packages. The "from-package" arg means "look
                # at the version numbers in each package.json file and if that doesn't
                # exist on NPM, publish"
                npm run lerna -- publish from-package --yes --no-verify-access
              fi

              # Cleanup
              rm ~/.npmrc
      - store_test_results:
          path: packages/template-retail-react-app/tests/reports
          when: always
      - store_artifacts:
          path: packages/template-retail-react-app/tests/screenshots
          when: always
      - slack/status:
          fail_only: true
          only_for_branches: develop
  generatedTemplate:
    docker:
      - image: circleci/node:14-stretch-browsers
    parameters:
      template:
        type: string
    steps:
      - checkout
      - setup
      - run:
          name: Generate << parameters.template >> project
          environment:
            GENERATOR_PRESET: << parameters.template >>
          command: |
            set GENERATOR_PRESET=<< parameters.template >>
            NODE_DEBUG=cluster,net,http,fs,tls,module,timers node packages/pwa-kit-create-app/scripts/create-mobify-app-dev.js --outputDir generated-<< parameters.template >>
  generatedTemplateWindows:
    parameters:
      template:
        type: string
    executor:
      name: win/default
      size: "large"
      shell: bash.exe
    steps:
      - checkout
      - setup_windows
      - run:
          name: Generate << parameters.template >> project
          environment:
            GENERATOR_PRESET: << parameters.template >>
          command: |
            set GENERATOR_PRESET=<< parameters.template >>
            NODE_DEBUG=cluster,net,http,fs,tls,module,timers node packages/pwa-kit-create-app/scripts/create-mobify-app-dev.js --outputDir generated-<< parameters.template >>
  generatedSFCCProjectTest:
    docker:
      - image: circleci/node:14-stretch-browsers
    steps:
      - checkout
      - setup
      - generate_and_test_project

  generatedSFCCProjectTestWindows:
    executor:
      name: win/default
      size: "large"
      shell: bash.exe
    steps:
      - checkout
      - setup_windows
      - generate_and_test_project
workflows:
  version: 2
  test:
    jobs:
      - generatedSFCCProjectTest
      - generatedSFCCProjectTestWindows
      - generatedTemplate:
          matrix:
            parameters:
              template: [express-minimal-test-project, typescript-minimal-test-project]
      - generatedTemplateWindows:
          matrix:
            parameters:
              template: [express-minimal-test-project, typescript-minimal-test-project]
  nightly-build:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - testNode12:
          context: nightly-build
      - testNode14:
          context: nightly-build
      - testNode14Windows:
          context: nightly-build
      - testNode14npm7:
          context: nightly-build
      - testNode14npm8:
          context: nightly-build
      - generatedSFCCProjectTest:
          context: nightly-build
      - generatedSFCCProjectTestWindows:
          context: nightly-build
      - generatedTemplate:
          context: nightly-build
          matrix:
            parameters:
              template: [ express-minimal-test-project, typescript-minimal-test-project ]
      - generatedTemplateWindows:
          context: nightly-build
          matrix:
            parameters:
              template: [ express-minimal-test-project, typescript-minimal-test-project ]
